		.586
		.MODEL FLAT, C
		.MMX
		.DATA 
			extern  a:word ; адресс массива
			extern  b_t:word ; адресс массива
			extern  b:word ; адресс массива
			extern  q:word ; адресс массива
		.CODE
		MUL_M PROC; локальная переменная массива
			
			mov EBX,0 ; y
			mov ESI,0 ; последовательно по строке  
		for2:	mov EAX,0 ; y	
			
		for1:	mov CX,b[8*EAX][EBX] ;offset=row_s*y+x
				mov b_t[ESI],CX ; пересылка в транспонированную матрицу
				
				add ESI,2	; переход к след элементу
				add EAX,2	; x+2 word=2*byte
				cmp EAX,16	; 14 послдний 16 переполнение
				jne for1	; цикл по строке
				
				add EBX,2	; по строке выпоннен
				cmp EBX,16  ; проверка конца по столбуам
				jne for2	; не равны переход к след столбцу
				
				; транспонирование завершено
				mov EAX,0 ; адресация 1 массива
				mov ESI,0 ; адресация 2 массива
				mov ECX,0 ; адресация результата
						
		loop1:	movq   MM0, qword ptr a[EAX]; первые 4 элемента а
				movq   MM1, qword ptr b_t[ESI]; первые 4 элемента b_t
				
				movq   MM2, qword ptr a[EAX][8]; вторые 4 элемента a
				movq   MM3, qword ptr b_t[ESI][8]; вторые 4 элемента b
				
				; обработка первых 4 элементов
				
				pmaddwd  MM0, MM1 ; 4 двойных слова первые 2 сумма в первое 2слово второе 2+ = 2 слово
				movq MM4,MM0 ; копирование в mm4
				psrlq MM4,32 ; сдвиг в право на 1 двойное слово в mm5 младшая часть
				paddd MM4,MM0 ; суммирование двух двойных слов
				
				; обработка вторых 4 элементов строки
				
				pmaddwd  MM2, MM3 ; 4 двойных слова первые 2 сумма в первое 2слово второе 2+ = 2 слово
				movq MM5,MM2 ; копирование в mm5
				psrlq MM5,32 ; сдвиг в право на 1 двойное слово в mm5 младшая часть
				paddd MM5,MM2 ; суммирование двух двойных слов
				
				paddd MM4,MM5; cумма за всю строку 
				
				;вывод результата
				movd  EBX,MM4 ; в регистр в младшую часть
				mov q[ECX], BX ; прислоение 16 бит 
				
				
				add ESI, 16 ; переход к новой строке транспонированного массива
				add ECX,2; результат следующий элемент
				cmp ESI,128
				jne loop1
				; строки во втором массиве закончились
				
				add EAX,16 ; переход в первой матрице к новой строке
				mov ESI,0; по всем строкам второй матрицы
				cmp EAX, 128
				jne loop1
				
				 emms
				;mov ESI,0
				
		ret
		MUL_M ENDP
		END